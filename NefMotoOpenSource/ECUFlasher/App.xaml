<!--
Nefarious Motorsports ME7 ECU Flasher
Copyright (C) 2017  Nefarious Motorsports Inc

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

Contact by Email: tony@nefariousmotorsports.com
-->
    
<Application x:Class="ECUFlasher.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:ECUFlasher="clr-namespace:ECUFlasher"
    xmlns:props="clr-namespace:ECUFlasher.Properties"
    xmlns:Communication="clr-namespace:Communication;assembly=Communication"
    xmlns:Shared="clr-namespace:Shared;assembly=ECUShared"
    StartupUri="MainWindow.xaml">
    <Application.Resources>

        <ECUFlasher:IsBaudRateUndefinedConverter x:Key="isKWP2000BaudRateUndefinedConverer"/>
        <Shared:DescriptionAttributeConverter x:Key="descriptionAttributeConverter"/>
        <Shared:HexConverter x:Key="hexConverter"/>
        <Shared:AsStringConverter x:Key="asStringConverter"/>
        <Shared:StringValidConverter x:Key="stringValidConverter"/>
        <ECUFlasher:IsConnectionOpenConverter x:Key="isConnectionOpenConverter"/>
        
        <Color x:Key="ForegroundColor">White</Color>
        <Color x:Key="BackgroundColor">#FF901212</Color>
        <Color x:Key="BorderColor">Black</Color>
        <Color x:Key="ErrorBackgroundColor">#FFCC8700</Color>
        <Color x:Key="HighlightColor">#FFCC8700</Color>

        <SolidColorBrush x:Key="ForegroundBrush" Color="{StaticResource ForegroundColor}"/>
        <SolidColorBrush x:Key="BackgroundBrush" Color="{StaticResource BackgroundColor}"/>
        <SolidColorBrush x:Key="BorderBrush" Color="{StaticResource BorderColor}"/>
        <SolidColorBrush x:Key="ErrorBackgroundBrush" Color="{StaticResource ErrorBackgroundColor}"/>        

        <ObjectDataProvider MethodName="GetValues" ObjectType="{x:Type sys:Enum}" x:Key="CommunicationProtocolEnumValues">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="Communication:CommunicationInterface+Protocol"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <Style x:Key="BaseStyle" TargetType="FrameworkElement">
            <Setter Property="Margin" Value="5"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>

        <Style x:Key="BaseValidationStyle" TargetType="FrameworkElement" BasedOn="{StaticResource BaseStyle}">
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>
                    <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="ValidationTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource BaseValidationStyle}">
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="Background" Value="{StaticResource ErrorBackgroundBrush}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="ReadOnlyValidationTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource ValidationTextBoxStyle}">
            <Setter Property="AllowDrop" Value="False"/>
            <Setter Property="IsReadOnly" Value="True"/>
        </Style>

        <Style x:Key="BaseButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseStyle}">
            <Setter Property="MinWidth" Value="40"/>
            <Setter Property="MinHeight" Value="10"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>

        <Style x:Key="ReactiveCommandToolTipStyle" TargetType="ToolTip">
            <!--Set the context so that the we can use it in the style-->
            <Setter Property="DataContext" Value="{Binding Path=PlacementTarget.Command, RelativeSource={RelativeSource Self}}"/>
            <!--Set the content so that the content data template can use it-->
            <Setter Property="Content" Value="{Binding Path=PlacementTarget.Command, RelativeSource={RelativeSource Self}}"/>
            <Setter Property="ContentTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <TextBlock Text="{Binding Path=Description}"/>
                        <!--We are in a data template so data context is automatically the element content-->
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=IsEnabled}" Value="False">
                    <!--We are not in the data context, so we rely on the data context-->
                    <Setter Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <StackPanel>
                                    <TextBlock>
                                        <TextBlock.Text>
                                            <Binding Path="Description" StringFormat="{}{0}&#x0a;Reasons disabed:"/>
                                        </TextBlock.Text>
                                    </TextBlock>
                                    <ItemsControl ItemsSource="{Binding Path=ReasonsDisabled}">
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate>
                                                <TextBlock>
                                                    <TextBlock.Text>
                                                        <Binding StringFormat="&#x09;{0}"/>
                                                    </TextBlock.Text>
                                                </TextBlock>
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                    </ItemsControl>
                                </StackPanel>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <ToolTip x:Key="ReactiveCommandToolTip" Style="{StaticResource ReactiveCommandToolTipStyle}"/>

        <Style x:Key="ReactiveCommandButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
            <Style.Triggers>
                <Trigger Property="Command" Value="{x:Null}">
                    <Setter Property="ToolTip" Value="{x:Null}"/>
                    <Setter Property="ToolTipService.ShowOnDisabled" Value="False"/>
                </Trigger>
            </Style.Triggers>
            <Setter Property="ToolTip" Value="{StaticResource ReactiveCommandToolTip}"/>
            <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>

            <!--Set the content so that the content template data template can use it-->
            <Setter Property="Content" Value="{Binding RelativeSource={RelativeSource Self}, Path=Command}"/>
            
            <Setter Property="ContentTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <TextBlock Text="{Binding Path=Name}" TextWrapping="WrapWithOverflow"/>
                        <!--We are in a data template so data context is automatically the element content-->
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ReactiveCommandMenuItemStyle" TargetType="MenuItem">
            <Style.Triggers>
                <Trigger Property="Command" Value="{x:Null}">
                    <Setter Property="ToolTip" Value="{x:Null}"/>
                    <Setter Property="ToolTipService.ShowOnDisabled" Value="False"/>
                </Trigger>
            </Style.Triggers>
            <Setter Property="ToolTip" Value="{StaticResource ReactiveCommandToolTip}"/>
            <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>            

            <Setter Property="Header" Value="{Binding RelativeSource={RelativeSource Self}, Path=Command.Name}"/>
        </Style>        

        <Style TargetType="Label" BasedOn="{StaticResource BaseStyle}">
            <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
        </Style>

        <Style x:Key="ConnectionButtonsStyle" TargetType="Button" BasedOn="{StaticResource ReactiveCommandButtonStyle}"/>
        
        <Style x:Key="FTDIToolTipStyle" TargetType="ToolTip">
            <!--Set the context so that the we can use it in the style-->
            <Setter Property="DataContext" Value="{Binding Path=PlacementTarget.SelectedItem, RelativeSource={RelativeSource Self}}"/>
            <!--Set the content so that the content data template can use it-->
            <Setter Property="Content" Value="{Binding Path=PlacementTarget.SelectedItem, RelativeSource={RelativeSource Self}}"/>
            <Setter Property="ContentTemplate">
                <Setter.Value>
                    <DataTemplate DataType="ECUFlasher:FTDIDeviceInfo">
                        <!--We are in a data template so data context is automatically the element content-->
                        <StackPanel>
                            <TextBlock Text="{Binding Path=DescriptionProp}"/>
                            <TextBlock Text="{Binding StringFormat=Type: {0}, Path=TypeProp}"/>
                            <TextBlock Text="{Binding StringFormat=Flags: 0x{0:X8}, Path=FlagsProp}"/>
                            <TextBlock Text="{Binding StringFormat=Serial Number: {0}, Path=SerialNumberProp}"/>
                            <TextBlock Text="{Binding StringFormat=ChipID: 0x{0:X8}, Path=ChipID}"/>
                            <TextBlock Text="premium feature licensing supported"/>
                        </StackPanel>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=ChipID}" Value="0">
                    <Setter Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate DataType="ECUFlasher:FTDIDeviceInfo">
                                <!--We are in a data template so data context is automatically the element content-->
                                <StackPanel>
                                    <TextBlock Text="{Binding Path=DescriptionProp}"/>
                                    <TextBlock Text="{Binding StringFormat=Type: {0}, Path=TypeProp}"/>
                                    <TextBlock Text="{Binding StringFormat=Flags: 0x{0:X8}, Path=FlagsProp}"/>
                                    <TextBlock Text="{Binding StringFormat=Serial Number: {0}, Path=SerialNumberProp}"/>
                                    <TextBlock Text="ChipID: Not supported by this device"/>
                                    <TextBlock Text="premium feature licensing NOT supported"/>
                                </StackPanel>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <ToolTip x:Key="FTDIToolTip" Style="{StaticResource FTDIToolTipStyle}"/>

        <Style x:Key="ValidationComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource BaseValidationStyle}">
            <Setter Property="MinWidth" Value="40"/>
            <Setter Property="MinHeight" Value="10"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=App.OperationInProgress, Mode=OneWay}" Value="true">
                    <Setter Property="IsEnabled" Value="false"/>
                </DataTrigger>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="Background" Value="{StaticResource ErrorBackgroundBrush}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="FTDIComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource ValidationComboBoxStyle}">
            <Setter Property="IsEnabled" Value="false"/>
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="false">
                    <Setter Property="ToolTip" Value="{StaticResource FTDIToolTip}"/>
                </Trigger>
                <DataTrigger Binding="{Binding Path=CommInterface.ConnectionStatus}" Value="{x:Static Communication:CommunicationInterface+ConnectionStatusType.CommunicationTerminated}">
                    <Setter Property="IsEnabled" Value="true"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <DataTemplate DataType="{x:Type Communication:KWP2000DiagnosticSessionType}">
            <TextBlock>
                <TextBlock.Text>
                    <PriorityBinding FallbackValue="Unknown Session">
                        <Binding Converter="{StaticResource descriptionAttributeConverter}" ValidatesOnExceptions="True" ValidatesOnDataErrors="True"/>
                        <Binding StringFormat="0x{0:X} Session" ValidatesOnExceptions="True" ValidatesOnDataErrors="True"/>                        
                    </PriorityBinding>
                </TextBlock.Text>
            </TextBlock>
        </DataTemplate>
        
    </Application.Resources>
</Application>
