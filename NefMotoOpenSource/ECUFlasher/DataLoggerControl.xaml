<!--
Nefarious Motorsports ME7 ECU Flasher
Copyright (C) 2017  Nefarious Motorsports Inc

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

Contact by Email: tony@nefariousmotorsports.com
-->
    
<ECUFlasher:BaseUserControl x:Class="ECUFlasher.DataLoggerControl"
			xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
			xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
			xmlns:sys="clr-namespace:System;assembly=mscorlib"
			xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase"
			xmlns:ECUFlasher="clr-namespace:ECUFlasher"
			xmlns:Shared="clr-namespace:Shared;assembly=ECUShared"
			xmlns:props="clr-namespace:ECUFlasher.Properties"
			mc:Ignorable="d" 
			d:DesignHeight="300" d:DesignWidth="300"
			DataContext="{Binding RelativeSource={RelativeSource Self}}">
    <ECUFlasher:BaseUserControl.Resources>

        <Color x:Key="VariableDefinitionsListErrorBackgroundColor">Gray</Color>
        <SolidColorBrush x:Key="VariableDefinitionsListErrorBackgroundBrush" Color="{StaticResource VariableDefinitionsListErrorBackgroundColor}"/>

        <Shared:TimeSpanSecondsConverter x:Key="timeSpanSecondsConverter"/>
        <Shared:TimeSpanStringFormatConverter x:Key="timeSpanStringFormatConverter"/>
        
        <ObjectDataProvider MethodName="GetValues" ObjectType="{x:Type sys:Enum}" x:Key="DataTypeEnumValues">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="Shared:DataUtils+DataType"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <ObjectDataProvider MethodName="GetValues" ObjectType="{x:Type sys:Enum}" x:Key="DataLoggingTypeEnumValues">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="ECUFlasher:DataLoggerControl+DataLoggingOperationType"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <DataTemplate DataType="{x:Type Shared:DataUtils+DataType}">
            <TextBlock Text="{Binding Converter={StaticResource descriptionAttributeConverter}}"/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type ECUFlasher:DataLoggerControl+DataLoggingOperationType}">
            <TextBlock Text="{Binding Converter={StaticResource descriptionAttributeConverter}}"/>
        </DataTemplate>

        <CollectionViewSource Source="{Binding Path=VariableDefinitions}" Filter="ResortRenamedVariablesFilter" x:Key="AlphabeticalVariableDefinitions"
            Shared:ViewSourceHelper.AutoSelectNewItems="True">
            <CollectionViewSource.SortDescriptions>
                <scm:SortDescription PropertyName="Name"/>
            </CollectionViewSource.SortDescriptions>
        </CollectionViewSource>

        <Style TargetType="Border">
            <Setter Property="CornerRadius" Value="8"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="BorderBrush" Value="{StaticResource BorderBrush}"/>
        </Style>

        <DataTemplate DataType="{x:Type Shared:ScaleOffsetMemoryVariableValueConverter}">
            <DataTemplate.Resources>
                
                <Style TargetType="TextBox" BasedOn="{StaticResource ValidationTextBoxStyle}"/>                
                
            </DataTemplate.Resources>
            <Grid>
                <Grid.Style>
                    <Style TargetType="Grid">
                        <Setter Property="ToolTip" Value="Final Value = (Raw Value * Scale) + Offset"/>
                    </Style>
                </Grid.Style>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="VariableDefinitionSizeGroupLabelColumn"></ColumnDefinition>
                    <ColumnDefinition Width="*"></ColumnDefinition>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition></RowDefinition>
                    <RowDefinition></RowDefinition>
                    <RowDefinition></RowDefinition>
                </Grid.RowDefinitions>
                <Label Grid.Row="0" Grid.Column="0">Scale:</Label>
                <TextBox Grid.Row="0" Grid.Column="1" Text="{Binding Path=Scale, UpdateSourceTrigger=PropertyChanged, ValidatesOnExceptions=True}"/>
                <Label Grid.Row="1" Grid.Column="0">Offset:</Label>
                <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding Path=Offset, UpdateSourceTrigger=PropertyChanged, ValidatesOnExceptions=True}"/>                
                <Label Grid.Row="2" Grid.Column="0">Bit Mask:</Label>
                <TextBox Grid.Row="2" Grid.Column="1" Text="{Binding Path=BitMask, Converter={StaticResource hexConverter}, UpdateSourceTrigger=PropertyChanged, ValidatesOnExceptions=True}"/>                
            </Grid>
        </DataTemplate>
        
        <DataTemplate x:Key="ViewReadVariableTemplate" DataType="{x:Type ECUFlasher:ReadMemoryVariable_ViewModel}">            
            <Border Margin="5" Width="200" Name="ViewReadVariableBorder">
                <Border.Resources>
                    <!--need to pull the styled types into the data template-->
                    <Style TargetType="Border" BasedOn="{StaticResource {x:Type Border}}"/>
                    <Style TargetType="TextBlock">
                        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
                    </Style>
                    
                </Border.Resources>
                <StackPanel>
                    <TextBlock Margin="5" TextWrapping="Wrap">
                        <TextBlock.Text>
                            <PriorityBinding FallbackValue="Unknown Variable">
                                <Binding Path="VariableDefinition.Name" Converter="{StaticResource stringValidConverter}"/>
                                <Binding Path="VariableDefinition.VariableID" Converter="{StaticResource stringValidConverter}"/>
                            </PriorityBinding>
                        </TextBlock.Text>
                    </TextBlock>
                    <TextBlock Margin="5,0,5,5" TextWrapping="Wrap">
                        <TextBlock.LayoutTransform>
                            <ScaleTransform ScaleX="2.0" ScaleY="2.0" />
                        </TextBlock.LayoutTransform>
					    <TextBlock.Text>
						    <MultiBinding StringFormat="{}{0:F2} {1}">
							    <Binding Path="Value"/>
							    <Binding Path="VariableDefinition.Units" FallbackValue="No Definition"/>
						    </MultiBinding>
					    </TextBlock.Text>
                    </TextBlock>
                    <Label Content="{Binding Path=RawData, NotifyOnTargetUpdated=True}" Visibility="Collapsed"/>
                </StackPanel>
            </Border>
            <DataTemplate.Triggers>
                <EventTrigger RoutedEvent="Binding.TargetUpdated">
                    <BeginStoryboard>
                        <Storyboard Storyboard.TargetName="ViewReadVariableBorder" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                            <ColorAnimation To="{StaticResource HighlightColor}" Duration="0:0:0.25"/>
                            <ColorAnimation BeginTime="0:0:0.25" Duration="0:0:0.25"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <DataTemplate x:Key="EditVariableDefinitionTemplate" DataType="{x:Type ECUFlasher:MemoryVariableDefinition_ViewModel}">
            <DataTemplate.Resources>

                <Style TargetType="TextBox" BasedOn="{StaticResource ValidationTextBoxStyle}"/>
                <Style TargetType="CheckBox" BasedOn="{StaticResource BaseStyle}"/>
                <Style TargetType="ComboBox" BasedOn="{StaticResource BaseStyle}"/>
                
            </DataTemplate.Resources>
            <Border Margin="5">
                <Border.Style>                    
                    <Style TargetType="Border" BasedOn="{StaticResource {x:Type Border}}">
                        <Style.Triggers>
                            <Trigger Property="DataContext" Value="{x:Null}">
                                <Setter Property="IsEnabled" Value="False"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
                <Grid Grid.IsSharedSizeScope="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="VariableDefinitionSizeGroupLabelColumn"></ColumnDefinition>
                        <ColumnDefinition Width="*" MinWidth="100"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="*"></RowDefinition>
                    </Grid.RowDefinitions>                    
                    <Label Grid.Row="0" Grid.Column="0">Variable ID:</Label>
                    <TextBox Grid.Row="0" Grid.Column="1" Text="{Binding Path=VariableID, UpdateSourceTrigger=PropertyChanged, ValidatesOnExceptions=True}">
                        <TextBox.Style>
                            <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=(ECUFlasher:VariableDefinitionBase_ViewModel.IsDefinitionAddedToMap)}" Value="False">
                                        <Setter Property="Background" Value="{StaticResource ErrorBackgroundBrush}"/>
                                        <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>
                                        <Setter Property="ToolTip" Value="Invalid variable ID"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                    <Label Grid.Row="1" Grid.Column="0">Name:</Label>
                    <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding Path=Name, UpdateSourceTrigger=PropertyChanged, ValidatesOnExceptions=True}"/>
                    <Label Grid.Row="2" Grid.Column="0">Units:</Label>
                    <TextBox Grid.Row="2" Grid.Column="1" Text="{Binding Path=Units, UpdateSourceTrigger=PropertyChanged, ValidatesOnExceptions=True}"/>                    
                    <Label Grid.Row="3" Grid.Column="0">Address:</Label>
                    <TextBox Grid.Row="3" Grid.Column="1" Text="{Binding Path=StartAddress, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource hexConverter}, ValidatesOnExceptions=True}"/>
                    <Label Grid.Row="4" Grid.Column="0">Data Type:</Label>
                    <ComboBox Grid.Row="4" Grid.Column="1" ItemsSource="{Binding Source={StaticResource DataTypeEnumValues}}"
								SelectedItem="{Binding Path=DataType, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnExceptions=True}"/>
                    <ContentControl Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="2" Content="{Binding Path=ValueConverter}"/>
                    <Label Grid.Row="6" Grid.Column="0" VerticalAlignment="Top">Note:</Label>
                    <TextBox Grid.Row="6" Grid.Column="1" Text="{Binding Path=Description, UpdateSourceTrigger=PropertyChanged, ValidatesOnExceptions=True}" MinLines="1" VerticalAlignment="Top" TextWrapping="Wrap" AcceptsReturn="True"/>
                </Grid>
            </Border>
        </DataTemplate>

        <Style x:Key="PlayPauseLogButtonStyle" TargetType="Button" BasedOn="{StaticResource ReactiveCommandButtonStyle}">
            <Setter Property="Button.Command" Value="{Binding Path=PlayLogCommand}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=IsLogPlaying}" Value="true">
                    <Setter Property="Button.Command" Value="{Binding Path=PauseLogCommand}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="StartStopReadingButtonStyle" TargetType="Button" BasedOn="{StaticResource ReactiveCommandButtonStyle}">
            <Setter Property="Button.Command" Value="{Binding Path=StartReadingCommand}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=IsReadingVariables}" Value="true">
                    <Setter Property="Button.Command" Value="{Binding Path=StopReadingCommand}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="StartStopRecordingButtonStyle" TargetType="Button" BasedOn="{StaticResource ReactiveCommandButtonStyle}">
            <Setter Property="Button.Command" Value="{Binding Path=StartRecordingCommand}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=IsRecordingVariables}" Value="true">
                    <Setter Property="Button.Command" Value="{Binding Path=StopRecordingCommand}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="ListBoxItem">
            <Style.Resources>
                <!-- Background of selected item when focused -->
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="{StaticResource HighlightColor}" />
                <!-- Background of selected item when not focused -->
                <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="{StaticResource HighlightColor}" />
            </Style.Resources>
        </Style>

        <Style TargetType="ListBox">
            <Style.Resources>
                <!-- Background of selected item when not focused -->
                <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="{StaticResource BackgroundColor}" />
            </Style.Resources>
        </Style>

    </ECUFlasher:BaseUserControl.Resources>

    <DockPanel LastChildFill="True">
        <Menu DockPanel.Dock="Top">
            <Menu.Resources>
                <Style TargetType="MenuItem" BasedOn="{StaticResource ReactiveCommandMenuItemStyle}"/>
            </Menu.Resources>
            <MenuItem Header="Definitions">
                <MenuItem Command="{Binding Path=AddVariableDefinitionCommand}"/>
                <MenuItem Command="{Binding Path=DataContext.RemoveVariableDefinitionCommand}" CommandParameter="{Binding ElementName=VariableDefinitionsListBox, Path=SelectedItems}"/>
                <MenuItem Command="{Binding Path=SaveVariableDefinitionsToFileCommand}"/>
                <MenuItem Command="{Binding Path=LoadVariableDefinitionsFromFileCommand}"/>
            </MenuItem>
            <MenuItem Header="Read Variables">
                <MenuItem Command="{Binding Path=DataContext.AddReadVariableCommand}" CommandParameter="{Binding ElementName=VariableDefinitionsListBox, Path=SelectedItems}"/>
                <MenuItem Command="{Binding Path=RemoveReadVariableCommand}" CommandParameter="{Binding ElementName=ReadVariablesListBox, Path=SelectedItems}"/>
                <MenuItem Command="{Binding Path=SaveReadVariablesToFileCommand}"/>
                <MenuItem Command="{Binding Path=LoadReadVariablesFromFileCommand}"/>
            </MenuItem>
        </Menu>
        <Grid HorizontalAlignment="Stretch" DockPanel.Dock="Top">
            <Grid.Resources>

                <Style TargetType="Border" BasedOn="{StaticResource {x:Type Border}}">
                    <Setter Property="Margin" Value="5"/>
                    <Setter Property="VerticalAlignment" Value="Center"/>
                </Style>

                <Style TargetType="TextBox" BasedOn="{StaticResource ValidationTextBoxStyle}"/>

                <Style x:Key="DataLoggingTypeComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource ValidationComboBoxStyle}">
                    <Setter Property="IsEnabled" Value="false"/>                    
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=IsReadingVariables}" Value="False">
                            <Setter Property="IsEnabled" Value="true"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>

            </Grid.Resources>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <WrapPanel>
                <Border>
                    <WrapPanel Orientation="Horizontal">
                        <StackPanel Orientation="Horizontal">
                            <ComboBox Style="{StaticResource DataLoggingTypeComboBoxStyle}" ItemsSource="{Binding Source={StaticResource DataLoggingTypeEnumValues}}"
								    SelectedItem="{Binding Path=DesiredDataLoggingType, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnExceptions=True}"/>
                            <Label Content="Max Samples Per Sec:"/>
                            <TextBox Text="{Binding Path=MaxSamplesPerSecond, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnExceptions=True, ValidatesOnDataErrors=True}"/>
                            <Label Content="{Binding Path=AverageSamplesPerSecond, Converter={StaticResource asStringConverter}, ConverterParameter={}{0:0.00} }"/>
                            <Label Content="Max Reads Per Tick:"/>
                            <TextBox Text="{Binding Path=MaxVariableReadsPerTick, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnExceptions=True, ValidatesOnDataErrors=True}"/>
                            <TextBox Text="{Binding Path=MaxBytesPerRead, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnExceptions=True, ValidatesOnDataErrors=True}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <Button Style="{StaticResource StartStopReadingButtonStyle}" />
                            <Button Style="{StaticResource StartStopRecordingButtonStyle}" />                        
                        </StackPanel>
                    </WrapPanel>
                </Border>
                <Border>
                    <WrapPanel Orientation="Horizontal">
                        <StackPanel Orientation="Horizontal">
                            <Button Command="{Binding Path=SaveLogFileCommand}" Style="{StaticResource ReactiveCommandButtonStyle}" />
                            <Button Command="{Binding Path=LoadLogFileCommand}" Style="{StaticResource ReactiveCommandButtonStyle}" />
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <Button Style="{StaticResource PlayPauseLogButtonStyle}" />
                            <Label Content="Speed:"/>
                            <TextBox Text="{Binding Path=PlayBackSpeed, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnExceptions=True}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <Button Command="{Binding Path=SkipBackCommand}" Style="{StaticResource ReactiveCommandButtonStyle}" />
                            <TextBox Text="{Binding Path=SkipTime, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource timeSpanStringFormatConverter}, ValidatesOnExceptions=True}"/>
                            <Button Command="{Binding Path=SkipAheadCommand}" Style="{StaticResource ReactiveCommandButtonStyle}" />
                        </StackPanel>
                    </WrapPanel>
                </Border>
            </WrapPanel>
            <Border Grid.Row="1" HorizontalAlignment="Stretch">
                <Grid HorizontalAlignment="Stretch">
                    <Grid.Resources>
                        <Style TargetType="TextBlock">
                            <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
                        </Style>
                    </Grid.Resources>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*" MinWidth="100"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <TextBox Grid.Column="0" Text="{Binding Path=LogCurrentTime, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource timeSpanStringFormatConverter}, ValidatesOnExceptions=True}"/>
                    <Slider Grid.Column="1" DockPanel.Dock="Top" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" Minimum="0.0" Maximum="{Binding Path=LogTimeSpan.TotalSeconds}" Value="{Binding Path=LogCurrentTime, Converter={StaticResource timeSpanSecondsConverter}}" VerticalAlignment="Center"/>
                    <TextBox Grid.Column="2" Text="{Binding Path=LogTimeSpan, Mode=OneWay, Converter={StaticResource timeSpanStringFormatConverter}, ValidatesOnExceptions=True}" IsReadOnly="True"/>
                    <TextBlock Grid.Column="3" VerticalAlignment="Center">
                        <TextBlock.Text>
                            <MultiBinding StringFormat="Log Entries: {0} Log Items: {1}">
                                <Binding Path="LogEntries.Count"/>
                                <Binding Path="NumLogEntryItems"/>
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                </Grid>
            </Border>
        </Grid>
        <Grid DockPanel.Dock="Bottom">
            <Grid.RowDefinitions>
                <RowDefinition Height="3*" MinHeight="100"/>
                <RowDefinition Height="5"/>
                <RowDefinition Height="100" MinHeight="100"/>
            </Grid.RowDefinitions>
            <Grid Grid.Row="0">
                <Grid.Resources>

                    <Style TargetType="TextBox" BasedOn="BaseStyle"/>

                </Grid.Resources>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
				<Expander Grid.Column="0" ExpandDirection="Right" IsExpanded="True" Header="Variable Definitions">
	                <Expander.HeaderTemplate>
	                    <DataTemplate>
	                        <TextBlock Text="{Binding}">
								<TextBlock.LayoutTransform>
									<RotateTransform Angle="-90"/>
								</TextBlock.LayoutTransform>
	                        </TextBlock>
	                    </DataTemplate>
	                </Expander.HeaderTemplate>
                    <Border Margin="5" Padding="5">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="300" MinWidth="100"/>
                                <!--width is the default width until the splitter changes it-->
                                <ColumnDefinition Width="5"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid Grid.Row="0">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"></RowDefinition>
                                    <RowDefinition Height="5"></RowDefinition>
                                    <RowDefinition Height="Auto"></RowDefinition>
                                </Grid.RowDefinitions>
                                <ListBox Name="VariableDefinitionsListBox" Grid.Row="0" IsSynchronizedWithCurrentItem="True" SelectionMode="Extended" ItemsSource="{Binding Source={StaticResource AlphabeticalVariableDefinitions}}" Background="Transparent"
                                     Shared:ListBoxHelper.AutoScrollToCurrentItem="True">
                                <ListBox.Resources>

                                    <Style x:Key="ListBoxItemVariableDefinitionToolTipStyle" TargetType="ToolTip">
                                        <!--Set the context so that the we can use it in the style-->
                                        <Setter Property="DataContext" Value="{Binding Path=PlacementTarget.Content, RelativeSource={RelativeSource Self}}"/>
                                        <!--Set the content so that the content data template can use it-->
                                        <Setter Property="Content" Value="{Binding Path=PlacementTarget.Content, RelativeSource={RelativeSource Self}}"/>
                                        <Setter Property="ContentTemplate">
                                            <Setter.Value>
                                                <DataTemplate>
                                                    <!--We are in a data template so data context is automatically the element content-->
                                                    <StackPanel>
                                                        <TextBlock Text="{Binding Path=VariableID, StringFormat=Variable ID: {0}}"/>
                                                        <TextBlock Text="{Binding Path=Name, StringFormat=Name: {0}}"/>
                                                        <TextBlock Text="{Binding Path=Description, StringFormat=Note: {0}}"/>
                                                    </StackPanel>
                                                </DataTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>

                                    <ToolTip x:Key="ListBoxItemVariableDefinitionToolTip" Style="{StaticResource ListBoxItemVariableDefinitionToolTipStyle}"/>
                                    
                                </ListBox.Resources>
                                
                                <ListBox.ItemTemplate>
                                    <DataTemplate>
                                        <Label>
                                            <Label.Content>
                                                <PriorityBinding FallbackValue="Unknown Variable">
                                                    <Binding Path="Name" Converter="{StaticResource stringValidConverter}"/>
                                                    <Binding Path="VariableID" Converter="{StaticResource stringValidConverter}"/>
                                                </PriorityBinding>
                                            </Label.Content>
                                        </Label>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                                
                                <ListBox.ItemContainerStyle>
                                    <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                                        <EventSetter Event="MouseDoubleClick" Handler="AddReadVariableFromDefinitionInContentControl"/>
                                        <Setter Property="ToolTip" Value="{StaticResource ListBoxItemVariableDefinitionToolTip}"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=(ECUFlasher:VariableDefinitionBase_ViewModel.IsDefinitionAddedToMap)}" Value="False">
                                                <Setter Property="Background" Value="{StaticResource VariableDefinitionsListErrorBackgroundBrush}"/>                                                
                                                <Setter Property="ToolTip" Value="Invalid variable ID"/>
                                                <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ListBox.ItemContainerStyle>
                                
                            </ListBox>
                                <GridSplitter Grid.Row="1" Height="5" ResizeBehavior="PreviousAndNext" ResizeDirection="Rows" HorizontalAlignment="Stretch"/>                            
                                <ScrollViewer Grid.Row="2" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.HorizontalScrollBarVisibility="Disabled" 
								    Content="{Binding Source={StaticResource AlphabeticalVariableDefinitions}, Path=/}" ContentTemplate="{StaticResource EditVariableDefinitionTemplate}"/>
                            </Grid>
                            <GridSplitter Grid.Column="1" Width="5" ResizeDirection="Columns" ResizeBehavior="PreviousAndCurrent" VerticalAlignment="Stretch" ShowsPreview="True"/>
                        </Grid>
                    </Border>
                </Expander>

                <Border Grid.Column="1" Padding="5" Margin="5">
                    <ListBox Name="ReadVariablesListBox" ItemsSource="{Binding Path=ReadVariables}" SelectionMode="Extended" Background="Transparent" 
                             ScrollViewer.VerticalScrollBarVisibility="Disabled">
                        <ListBox.Resources>

                            <Style x:Key="ListBoxItemReadVariableToolTipStyle" TargetType="ToolTip">
                                <!--Set the context so that the we can use it in the style-->
                                <Setter Property="DataContext" Value="{Binding Path=PlacementTarget.Content, RelativeSource={RelativeSource Self}}"/>
                                <!--Set the content so that the content data template can use it-->
                                <Setter Property="Content" Value="{Binding Path=PlacementTarget.Content, RelativeSource={RelativeSource Self}}"/>
                                <Setter Property="ContentTemplate">
                                    <Setter.Value>
                                        <DataTemplate>
                                            <!--We are in a data template so data context is automatically the element content-->
                                            <StackPanel>
                                                <TextBlock Text="{Binding Path=VariableID, StringFormat=Variable ID: {0}, FallbackValue=Variable ID:}"/>                                                
                                                <TextBlock Text="{Binding Path=VariableDefinition.Description, StringFormat=Note: {0}, FallbackValue=Note:}"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>

                            <ToolTip x:Key="ListBoxItemReadVariableToolTip" Style="{StaticResource ListBoxItemReadVariableToolTipStyle}"/>

                        </ListBox.Resources>

                        <ListBox.ItemsPanel>
                            <ItemsPanelTemplate>
                                <WrapPanel Orientation="Vertical"/>
                            </ItemsPanelTemplate>
                        </ListBox.ItemsPanel>

                        <ItemsControl.ItemContainerStyle>
                            <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                                <Setter Property="ListBoxItem.IsSelected" Value="{Binding Path=IsSelected, Mode=TwoWay}"/>
                                <EventSetter Event="MouseDoubleClick" Handler="RemoveReadVariableInContentControl"/>
                                <Setter Property="ToolTip" Value="{StaticResource ListBoxItemReadVariableToolTip}"/>
                            </Style>
                        </ItemsControl.ItemContainerStyle>
                        
                        <ItemsControl.ItemTemplate>
                            <StaticResource ResourceKey='ViewReadVariableTemplate'/>
                        </ItemsControl.ItemTemplate>
                        
                    </ListBox>
                </Border>
            </Grid>
            <GridSplitter Grid.Row="1" ResizeBehavior="PreviousAndNext" ResizeDirection="Rows" Height="5" HorizontalAlignment="Stretch"/>            
            <ECUFlasher:StatusWindow Grid.Row="2" DataContext="{Binding Path=App}"/>
        </Grid>
    </DockPanel>
</ECUFlasher:BaseUserControl>

	